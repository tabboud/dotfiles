#!/usr/bin/env bash

# Review pull-requests entirely in vim using "sindrets/diffview.nvim".

# Use gum (https://github.com/charmbracelet/gum) if it exists
GUM_EXISTS=
if command -v gum &>/dev/null; then
    GUM_EXISTS=1
fi

function continueOrExit() {
    continueMsg="$1"
    if [ $GUM_EXISTS -eq 1 ]; then
        gum confirm "$continueMsg" && return || echo "Stopping review" && exit 0
    else
        read -r -n 1 -p "Press (c) to continue reviewing: " c
        case "$c" in
            [Cc]*)
                return
                ;;
            *)
                echo "Stopping review"
                exit 0
                ;;
        esac
    fi
}

# Select PR number, branch and base branch from currently open PRs
selection=$(gh pr list --json number,baseRefName,headRefName,title --template '{{range .}}{{tablerow (printf "%-5v %-30v %-10v" .number .headRefName .baseRefName)}}{{end}}' | fzf --reverse --height=20 --border --reverse)
if [[ -z $selection ]]; then
    return
fi
PR_NUMBER=$(echo "$selection" | awk '{print $1}')
PR_BRANCH=$(echo "$selection" | awk '{print $2}')
PR_BASE_BRANCH=$(echo "$selection" | awk '{print $3}')

# Update origin base branch so review is correct
printf "Updating base branch (%s) from origin\n" "$PR_BASE_BRANCH"
git fetch origin
git switch "$PR_BASE_BRANCH"
git pull

# checkout the desired review branch and show stats
printf "Checking out PR #%s\n" "$PR_NUMBER"
gh pr checkout "$PR_NUMBER"

# Show stats from PR branch to remote origin default branch
env REVIEW_BASE="${PR_BASE_BRANCH}" git stat
continueOrExit "Review PR?"

# Reset PR branch to merge point and open in vim
mergeCommit=$(git merge-base HEAD origin/"$PR_BASE_BRANCH")
git reset --soft "$mergeCommit"
git reset               # to make everything unstaged
nvim -c :DiffviewOpen   # to use fugitive for the review

continueOrExit "Reset PR branch back to origin?"

# Reset PR branch back to remote
git reset --hard origin/"$PR_BRANCH"

